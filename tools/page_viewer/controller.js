// Generated by CoffeeScript 1.6.2
(function() {
  var PageController;

  PageController = function($scope) {
    var initKmeans;

    $scope.pageData = null;
    $scope.numCluster = 1;
    $scope.cluster = [];
    $scope.readFile = function() {
      var file, reader;

      file = document.getElementById('file-input').files[0];
      reader = new FileReader();
      reader.readAsText(file);
      return reader.onloadend = function() {
        return $scope.$apply(function() {
          var data, _i, _len, _ref, _results;

          $scope.pageData = JSON.parse(reader.result);
          $scope.cluster = [];
          $scope.numCluster = 1;
          _ref = $scope.pageData.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            data = _ref[_i];
            $scope.cluster.push(0);
            _results.push(data.c = 0);
          }
          return _results;
        });
      };
    };
    $scope.getClusterColor = function(cluster) {
      if ($scope.numCluster === 1) {
        return "hsla(0, 0, 0, 0)";
      }
      return "hsla(" + (Math.round(360 / $scope.numCluster * cluster)) + ", 50%, 50%, 0.5)";
    };
    initKmeans = function() {
      var clusterCenters, shuffled;

      clusterCenters = [];
      shuffled = _.shuffle(_.range($scope.pageData.data.length));
      _($scope.numCluster).times(function(i) {
        var data;

        data = $scope.pageData.data[shuffled[i]];
        $scope.cluster[shuffled[i]] = i;
        return clusterCenters.push([data.x + data.w / 2, data.y + data.h / 2]);
      });
      return clusterCenters;
    };
    $scope.kmeans = function() {
      var clusterCenters, data, i, minDist, nearestCenter, numChangeCluster, numData, _i, _len, _ref;

      numData = $scope.pageData.data.length;
      numChangeCluster = $scope.numCluster;
      clusterCenters = initKmeans();
      while (numChangeCluster > 0) {
        numChangeCluster = 0;
        _ref = $scope.pageData.data;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          data = _ref[i];
          minDist = Infinity;
          nearestCenter = -1;
          _($scope.numCluster).times(function(j) {
            var center, d;

            center = clusterCenters[j];
            d = (data.x - center[0]) * (data.x - center[0]) + (data.y - center[1]) * (data.y - center[1]);
            if (d < minDist) {
              minDist = d;
              return nearestCenter = j;
            }
          });
          if (nearestCenter !== $scope.cluster[i]) {
            $scope.cluster[i] = nearestCenter;
            numChangeCluster++;
          }
        }
        _($scope.numCluster).times(function(j) {
          var c, myCluster, numDataInCluster, sumX, sumY, _j, _len1, _ref1;

          myCluster = [];
          sumX = 0;
          sumY = 0;
          numDataInCluster = 0;
          _ref1 = $scope.cluster;
          for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
            c = _ref1[i];
            if (c === j) {
              sumX += $scope.pageData.data[i].x + $scope.pageData.data[i].w / 2;
              sumY += $scope.pageData.data[i].y + $scope.pageData.data[i].h / 2;
              numDataInCluster++;
            }
          }
          return clusterCenters[j] = [sumX / numDataInCluster, sumY / numDataInCluster];
        });
      }
      _.each($scope.cluster, function(c, i) {
        return $scope.pageData.data[i].c = c;
      });
    };
    $scope.numHierarchyCluster = 1;
    $scope.hierarchyCluster = function() {
      var allRectangleGroups, closestPairs, clusterIndex, d, data, i, idGrpPair1, idGrpPair2, idGrpPairs, j, k, mergee, mergeeID, merger, mergerID, minDist, rect, rectGrp, rectID, rectangleGroupIndices, rgi, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref;

      rectangleGroupIndices = [];
      allRectangleGroups = {};
      _ref = $scope.pageData.data;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        data = _ref[i];
        $scope.cluster.push(i);
        data.c = i;
        rect = new Rectangle(data.x, data.y, data.w, data.h);
        rectGrp = new RectangleGroup(rect);
        rectID = _.uniqueId();
        allRectangleGroups[rectID] = rectGrp;
        rectangleGroupIndices.push(rectID);
      }
      while (_.keys(allRectangleGroups).length > $scope.numHierarchyCluster) {
        idGrpPairs = _.pairs(allRectangleGroups);
        minDist = Infinity;
        closestPairs = null;
        for (i = _j = 0, _len1 = idGrpPairs.length; _j < _len1; i = ++_j) {
          idGrpPair1 = idGrpPairs[i];
          for (j = _k = 0, _len2 = idGrpPairs.length; _k < _len2; j = ++_k) {
            idGrpPair2 = idGrpPairs[j];
            if (i >= j) {
              continue;
            }
            d = idGrpPair1[1].distance(idGrpPair2[1]);
            if (d < minDist) {
              minDist = d;
              closestPairs = [idGrpPair1[0], idGrpPair2[0]];
            }
          }
        }
        mergerID = closestPairs[0];
        merger = allRectangleGroups[mergerID];
        mergeeID = closestPairs[1];
        mergee = allRectangleGroups[mergeeID];
        for (k = _l = 0, _len3 = rectangleGroupIndices.length; _l < _len3; k = ++_l) {
          rgi = rectangleGroupIndices[k];
          if (rgi === mergeeID) {
            rectangleGroupIndices[k] = mergerID;
          }
        }
        allRectangleGroups[mergerID] = merger.union(mergee);
        delete allRectangleGroups[mergeeID];
      }
      clusterIndex = 0;
      for (rectID in allRectangleGroups) {
        rect = allRectangleGroups[rectID];
        for (i = _m = 0, _len4 = rectangleGroupIndices.length; _m < _len4; i = ++_m) {
          rgi = rectangleGroupIndices[i];
          if (rgi === rectID) {
            $scope.pageData.data[i].c = clusterIndex;
          }
        }
        clusterIndex += 1;
      }
      $scope.numCluster = $scope.numHierarchyCluster;
    };
  };

  window.PageController = PageController;

}).call(this);
